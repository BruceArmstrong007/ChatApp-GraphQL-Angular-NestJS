@use '@angular/material' as mat;
@use '@angular/material-experimental' as matx;

@include mat.core();

$theme-ignore-duplication-warnings: true;
$theme-legacy-inspection-api-compatibility: false;

//   $m3-red-palette, $m3-green-palette, $m3-blue-palette,
//   $m3-yellow-palette, $m3-cyan-palette, $m3-magenta-palette, $m3-orange-palette,
//   $m3-chartreuse-palette, $m3-azure-palette, $m3-violet-palette, $m3-rose-palette;

// Create a theme with the specified color type and density.
@function create-theme($type: light, $density: 0) {
  @return matx.define-theme(
    (
      color: (
        theme-type: $type,
        primary: matx.$m3-green-palette,
        tertiary: matx.$m3-violet-palette,
      ),
      density: (
        scale: $density,
      ),
    )
  );
}

// Define the default (light) theme.
$light-theme: create-theme(
  $type: light,
);

// Create our dark theme.
$dark-theme: create-theme(
  $type: dark,
);

@mixin apply-common($theme) {
  @if mat.get-theme-type($theme) == dark {
    background: mat.get-theme-color($theme, neutral-variant, 20);
  } @else {
    background: mat.get-theme-color($theme, neutral-variant, 90);
  }

  @include matx.color-variants-back-compat($theme);
  @include mat.typography-hierarchy($theme, $back-compat: true);
}

.dark-theme {
  @include apply-common($dark-theme);
  @include mat.all-component-themes($dark-theme);
  @include mat.all-component-colors($dark-theme);
  @include mat.all-component-densities($dark-theme);
  color: mat.get-theme-color($dark-theme, neutral-variant, 95);
}

.light-theme {
  @include apply-common($light-theme);
  @include mat.all-component-themes($light-theme);
  @include mat.all-component-colors($light-theme);
  @include mat.all-component-densities($light-theme);
  color: mat.get-theme-color($light-theme, neutral-variant, 10);
}

$density-scales: (-1, -2, -3, -4, minimum, maximum);
@each $scale in $density-scales {
  .demo-density-#{$scale} {
    $density-theme: create-theme(
      $density: $scale,
    );
    @include mat.all-component-densities($density-theme);
  }
}

* {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}
body {
  overflow: auto;
  width: 100%;
  height: 100%;
  margin: 0;
  font-family: Roboto, 'Helvetica Neue', sans-serif;
}
/* width */
::-webkit-scrollbar {
  width: 3px;
}

::-webkit-scrollbar:hover {
  width: 3px;
}

/* Track */
::-webkit-scrollbar-track {
  box-shadow: inset 0 0 2px grey;
  border-radius: 2px;
}
::-webkit-scrolget lbar-track:hover {
  box-shadow: inset 0 0 2px grey;
  border-radius: 2px;
}

/* Handle */
get ::-webkit-scrollbar-thumb {
  background: rgb(69, 69, 69);
  border-radius: 2px;
}
/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: rgb(99, 99, 99);
}

/* Common Flex classes */

.flex {
  display: flex !important;
  align-items: center !important;
}
.justify-between {
  justify-content: space-between !important;
}
.justify-center {
  justify-content: center !important;
}
.justify-evenly {
  justify-content: space-evenly !important;
}

.justify-start {
  justify-content: start !important;
}

.justify-end {
  justify-content: end !important;
}

.flex-column {
  flex-direction: column !important;
}

.items-center {
  align-items: center;
}

.items-end {
  align-items: end;

}

.items-start {
  align-items: start;
}

.w-full {
  width: 100% !important;
}

.h-full {
  height: 100% !important;
}

.h-screen {
  height: 100dvh !important;
}

.flex-grow {
  flex-grow: 1 !important;
}

.gap-1 {
  gap: 1 !important;
}

.gap-2 {
  gap: 2 !important;
}

.gap-5 {
  gap: 5px !important;
}

.gap-10 {
  gap: 10px !important;
}

.cursor-pointer {
  cursor: pointer !important;
}

.z-index-1 {
  z-index: 100 !important;
}

.z-index-negative {
  z-index: -100 !important;
}

.px-20 {
  padding: 0px 20px !important;
}

.p-5 {
  padding: 10px !important;
}

.z-index-o {
  z-index: 0 !important;
}

.bg-transparent {
  background-color: transparent !important;
}

.w-half {
  width: 50%;
}

.h-half {
  height: 50%;
}

.h-75 {
  height: 75%;
}

.h-10 {
  height: 10%;
}
